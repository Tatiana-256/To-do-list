{"version":3,"sources":["components/TodoListTask.tsx","components/TodoListTasks.tsx","store/api.ts","components/TodoListFooter.tsx","components/TodoListTitle.tsx","components/AddNewItemForm.tsx","store/actions.ts","store/reducer.ts","ToDoList.tsx","App.tsx","serviceWorker.js","store/store.ts","index.js"],"names":["TodoListTask","state","editMode","title","activateEditMode","setState","deActivateEditMode","e","props","changeTitle","task","currentTarget","value","onIsDoneChanges","changeStatus","checked","onChangePriority","changePriority","deleteTask","id","classSelect","this","priority","className","onBlur","autoFocus","defaultValue","onClick","addedDate","onChange","type","status","htmlFor","React","Component","TodoListTasks","ResultCodeEnum","taskElements","tasks","map","key","TodoListFooter","isHidden","hideShow","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTitle","deleteToDoList","onTitleChange","AddNewItemForm","error","itemName","onAddItemClick","newTask","addItem","onItemChange","event","onKeyPress","actions","ADD_TASK","newList","ADD_TO_DO_LIST","toDoListId","taskId","obj","CHANGE_TASK","CHANGE_LIST_TITLE","DELETE_TODOLIST","DELETE_TASK","toDoLists","SET_TO_DO_LIST","todolistId","SET_TASKS","instance","axios","create","baseURL","withCredentials","headers","api","post","newTaskTitle","get","listId","put","delete","initialState","reducer","action","tl","todo","newTasks","todoListId","t","filter","toDoList","ToDoList","restoreState","getTasksThunkC","saveState","localStorage","setItem","JSON","stringify","addTaskThunkC","newFilterValue","changeStatusThunkC","changeTitleOfList","changeListTitleThunkC","changeTaskThunkC","changePriorityThunkC","deleteToDoListThunkC","deleteTaskThunkC","render","connect","dispatch","a","data","resultCode","Success","result","items","item","App","getToDoListThunkC","addToDoList","addToDoListThunkC","list","toDoListReducer","Boolean","window","location","hostname","match","reducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e0044810.chunk.js","sourcesContent":["import React from 'react';\r\nimport './task.css'\r\nimport {taskType} from \"../store/reducer\";\r\n\r\ntype PropsType ={\r\n    task: taskType\r\n\r\n\r\n    changeTitle: (task: taskType, value: string) => void\r\n    changeStatus: (task: taskType, checked: any) => void\r\n    changePriority: (task: taskType, value: string) => void\r\n    deleteTask: (id: string)=>void\r\n\r\n}\r\n\r\n\r\n\r\nclass TodoListTask extends React.Component<PropsType> {\r\n\r\n    state = {\r\n        editMode: false,\r\n        title: ''\r\n    }\r\n\r\n    //_________________Add area for ability to change task\r\n\r\n    activateEditMode = () => {\r\n        this.setState({editMode: true})\r\n    }\r\n\r\n    deActivateEditMode = (e: any) => {\r\n        this.props.changeTitle(this.props.task, e.currentTarget.value)\r\n        this.setState({title: e.currentTarget.value, editMode: false})\r\n    }\r\n\r\n    //___________ changing IS_DONE of task and modifying task________\r\n\r\n    onIsDoneChanges = (e: any) => {\r\n        this.props.changeStatus(this.props.task, e.currentTarget.checked)\r\n    }\r\n\r\n\r\n    //_____________change priority_____________\r\n\r\n    onChangePriority = (e: any) => {\r\n        this.props.changePriority(this.props.task, e.currentTarget.value)\r\n    }\r\n\r\n\r\n    //___________Delete task_________\r\n\r\n    deleteTask = () => {\r\n        this.props.deleteTask(this.props.task.id)\r\n    }\r\n\r\n    //___________________\r\n\r\n    render() {\r\n        let classSelect = this.props.task.priority === \"1\" ? 'low' :\r\n            this.props.task.priority === \"2\" ? 'average' :\r\n                this.props.task.priority === \"3\" ? 'high' : ''\r\n\r\n        return <div className='onetask'>\r\n            <div className='taskAndDelete'>\r\n                <div className='hov'>\r\n                    {this.state.editMode ?\r\n                        <input onBlur={this.deActivateEditMode}\r\n                               autoFocus={true}\r\n                               defaultValue={this.props.task.title}/> :\r\n                        <div className=\"task\"><span onClick={this.activateEditMode}>\r\n                            {this.props.task.title}\r\n                        </span></div>}\r\n                    <div className=\"inner\">\r\n                        <div>Created: {this.props.task.addedDate}</div>\r\n                    </div>\r\n                </div>\r\n                <button className='delete' onClick={this.deleteTask}>x</button>\r\n            </div>\r\n            <div className='prior'>\r\n                <div className='check'>priority</div>\r\n                <select\r\n                    className={classSelect}\r\n                    value={this.props.task.priority}\r\n                    onChange={this.onChangePriority}\r\n                >\r\n                    <option value='1' className='low'>low</option>\r\n                    <option value=\"2\" className='average'>average</option>\r\n                    <option value=\"3\" className='high'>high\r\n                    </option>\r\n                </select>\r\n                <div className='check'>is done?</div>\r\n                <input\r\n                    id={this.props.task.id}\r\n                    className='checkbox'\r\n                    onChange={this.onIsDoneChanges}\r\n                    type=\"checkbox\" checked={this.props.task.status}/>\r\n                <label htmlFor={this.props.task.id}/>\r\n\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default TodoListTask","import React from 'react';\r\nimport TodoListTask from \"./TodoListTask\";\r\nimport {taskType} from '../store/reducer';\r\n\r\ntype PropsType = {\r\n    tasks: Array<taskType>,\r\n    changeTitle: (task: taskType, value: string) => void,\r\n    changeStatus: (task: taskType, checked:any) => void,\r\n    deleteTask: (id: string) => void,\r\n    changePriority: (task: taskType, value: string) => void\r\n\r\n}\r\n\r\n\r\nfunction TodoListTasks(props: PropsType) {\r\n    let taskElements = props.tasks.map((task: taskType) => {\r\n        return <TodoListTask\r\n            key={task.id}\r\n            changeTitle={props.changeTitle}\r\n            changeStatus={props.changeStatus}\r\n            deleteTask={props.deleteTask}\r\n            changePriority={props.changePriority}\r\n            task={task}\r\n        />\r\n    })\r\n    return (\r\n        <div className=\"todoList-task\">\r\n            {taskElements}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoListTasks","import axios from \"axios\";\r\nimport {taskType} from \"./reducer\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/todo-lists',\r\n    withCredentials: true,\r\n    headers: {'API-KEY': '55ac5274-f21f-43a3-b42e-5cfba380d176'}\r\n})\r\n\r\n\r\nexport const api = {\r\n\r\n    createToDoList(title: string) {\r\n        return instance.post<APIRequestType<itemResponseType>>('', {title: title})\r\n    },\r\n    createTask(newTaskTitle: string, toDoListId: string) {\r\n        return instance.post<APIRequestType<taskType>>(`/${toDoListId}/tasks`, {title: newTaskTitle})\r\n    },\r\n    getToDoList() {\r\n        return instance.get<Array<itemResponseType>>(\"/\")\r\n    },\r\n\r\n    updateTask(listId: string, taskId: string, task: taskType, obj: any) {\r\n        return instance.put<APIRequestType<taskType>>(`/${listId}/tasks/${taskId}`, {...task, ...obj})\r\n    },\r\n    updateToDoList(listId: string, obj: any) {\r\n        return instance.put<APIRequestType<itemResponseType>>(`/${listId}`, {...obj})\r\n    },\r\n\r\n    deleteToDoList(listId: string) {\r\n        return instance.delete(`/${listId}`)\r\n\r\n    },\r\n    deleteTask(listId: string, taskId: string) {\r\n        return instance.delete(`/${listId}/tasks/${taskId}`)\r\n    },\r\n    getTask(toDoListId: string) {\r\n        return instance.get<getTaskAPI>(`/${toDoListId}/tasks`)\r\n\r\n    }\r\n}\r\n\r\n\r\n// __________________types for API________________\r\n\r\nexport type itemResponseType = {\r\n    id: string,\r\n    title: string,\r\n    addedDate: string,\r\n    order: number,\r\n    tasks: Array<taskType>\r\n    // toDoLists?: any\r\n}\r\n\r\nexport enum ResultCodeEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport type APIRequestType<R> = {\r\n    resultCode: ResultCodeEnum\r\n    messages: Array<string>,\r\n    data: {\r\n        item: R\r\n    }\r\n}\r\n\r\ntype getTaskAPI = {\r\n    items: Array<taskType>,\r\n    totalCount: number,\r\n    error: string\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// let a = (s1, s2) => {\r\n//     let arr1 = s1.split(\"\\n\")\r\n//     let arr2 = s2.split(\"\\n\")\r\n//\r\n//     let res = []\r\n//     for (let i = 0; i < arr1.length; i++) {\r\n//         let str = arr1[i].charAt(0) + '' + arr2[arr1.length - 1 - i]\r\n//         res.push(str)\r\n//     }\r\n//     return res.join('\\n')\r\n// }","import React from 'react';\r\n\r\ntype PropsType = {\r\n    changeFilter: (filter: string) => void,\r\n    filterValue: string\r\n}\r\n\r\n\r\nclass TodoListFooter extends React.Component<PropsType> {\r\n    state = {isHidden: true}\r\n\r\n    hideShow = () => {\r\n        this.setState({isHidden: !this.state.isHidden})\r\n    }\r\n\r\n    onAllFilterClick = () => {\r\n        this.props.changeFilter('All')\r\n    }\r\n    onCompletedFilterClick = () => {\r\n        this.props.changeFilter('Completed')\r\n    }\r\n    onActiveFilterClick = () => {\r\n        this.props.changeFilter('Active')\r\n    }\r\n\r\n\r\n    render() {\r\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active btr_All\" : \"normal btr_All\";\r\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active btr_Comp\" : \"normal btr_Comp\";\r\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active btr_act\" : \"normal btr_act\";\r\n\r\n        return (\r\n\r\n            <div className=\"footer\">\r\n                {this.state.isHidden && <div className=\"todoList-footer\">\r\n                    <button className={classForAll} onClick={this.onAllFilterClick}>All\r\n                    </button>\r\n                    <button className={classForCompleted} onClick={this.onCompletedFilterClick}>Completed\r\n                    </button>\r\n                    <button className={classForActive} onClick={this.onActiveFilterClick}>Active\r\n                    </button>\r\n                </div>}\r\n                {this.state.isHidden ? <div>\r\n                        <button onClick={this.hideShow} className='hide_btn'>Hide</button>\r\n                    </div> :\r\n                    <div>\r\n                        <button onClick={this.hideShow} className='btn'>Show</button>\r\n                    </div>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListFooter","import React from \"react\";\r\n\r\ntype PropsType = {\r\n    title: string,\r\n    changeTitle: (title: string) => void,\r\n    deleteToDoList: any\r\n}\r\n\r\n\r\nclass TodoListTitle extends React.Component<PropsType> {\r\n    state = {\r\n        editMode: false,\r\n        title: this.props.title\r\n    }\r\n\r\n\r\n    //_________________Add area for ability to change task\r\n\r\n    activateEditMode = () => {\r\n        this.setState({editMode: true})\r\n    }\r\n\r\n    deActivateEditMode = (e: any) => {\r\n        this.props.changeTitle(e.currentTarget.value)\r\n        this.setState({editMode: false})\r\n    }\r\n\r\n    onTitleChange(e: any) {\r\n        this.setState({title: e.currentTarget.value})\r\n    }\r\n\r\n\r\n    render() {\r\n        return <div className='list'>\r\n            <div className='delete_list'>\r\n                <button className='delete' onClick={this.props.deleteToDoList}>x</button>\r\n\r\n            </div>\r\n            <div className='inpt'>\r\n                {this.state.editMode ?\r\n                    <input onBlur={this.deActivateEditMode}\r\n                           autoFocus={true}\r\n                           value={this.state.title}\r\n                           onChange={this.onTitleChange}\r\n                    /> :\r\n                    <span onClick={this.activateEditMode}>\r\n                            {this.props.title}\r\n                        </span>}\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default TodoListTitle\r\n\r\n","import React from 'react';\r\n\r\ntype PropsType={\r\n    addItem: (task: string)=>void\r\n}\r\n\r\nclass AddNewItemForm extends React.Component <PropsType>{\r\n    state = {\r\n        error: false,\r\n        itemName: ''\r\n    }\r\n\r\n\r\n    onAddItemClick = () => {\r\n        let newTask = this.state.itemName\r\n        this.setState({itemName: ''})\r\n        if (newTask === '') {\r\n            this.setState({error: true})\r\n        } else {\r\n            this.setState({error: false})\r\n            this.props.addItem(newTask)\r\n        }\r\n\r\n    }\r\n\r\n    onItemChange = (event: any) => {\r\n        this.setState({\r\n            error: false,\r\n            itemName: event.currentTarget.value\r\n        })\r\n    }\r\n\r\n    onKeyPress = (e: any) => {\r\n        if (e.key === \"Enter\") {\r\n            this.onAddItemClick()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <div className=\"todoList-newTaskForm\">\r\n                <input\r\n                    value={this.state.itemName} onChange={this.onItemChange}\r\n                       type=\"text\"\r\n                       onKeyPress={this.onKeyPress}\r\n                       className={this.state.error ? 'error' : 'black_border'}\r\n                />\r\n                <button onClick={this.onAddItemClick} className='btn'>Add</button>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default AddNewItemForm","import {\r\n    ADD_TASK,\r\n    ADD_TO_DO_LIST, CHANGE_LIST_TITLE,\r\n    CHANGE_TASK,\r\n    DELETE_TASK,\r\n    DELETE_TODOLIST, listTypes,\r\n    SET_TASKS,\r\n    SET_TO_DO_LIST, taskType\r\n} from \"./reducer\";\r\nimport {InferActionsTypes} from \"./store\";\r\nimport {itemResponseType} from \"./api\";\r\n\r\nexport type ActionsType = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    addTaskAC: (newTask: taskType) => ({type: ADD_TASK, newTask: newTask} as const),\r\n    addTodolistAC: (newList: listTypes | itemResponseType) => ({type: ADD_TO_DO_LIST, newList: newList} as const),\r\n    changeTaskAC: (toDoListId: string, taskId: string, obj: any) => ({\r\n        type: CHANGE_TASK,\r\n        obj: obj,\r\n        taskId: taskId,\r\n        toDoListId: toDoListId\r\n    } as const),\r\n    changeListTitle: (toDoListId: string, obj: any) => ({\r\n        type: CHANGE_LIST_TITLE, obj: obj, toDoListId: toDoListId\r\n    } as const),\r\n    deleteToDoListAC: (toDoListId: string) => ({type: DELETE_TODOLIST, toDoListId} as const),\r\n    deleteTaskAC: (toDoListId: string, taskId: string) => ({\r\n        type: DELETE_TASK,\r\n        toDoListId,\r\n        taskId,\r\n    } as const),\r\n    setToDoList: (toDoLists: Array<itemResponseType>) => ({type: SET_TO_DO_LIST, toDoLists} as const),\r\n    setTasks: (tasks: Array<taskType>, todolistId: string) => ({type: SET_TASKS, tasks, todolistId} as const)\r\n}\r\n\r\n\r\n\r\n","import {actions, ActionsType} from \"./actions\";\r\nimport {baseThunkType} from \"./store\";\r\nimport {api, ResultCodeEnum} from \"./api\";\r\n\r\nexport const ADD_TO_DO_LIST = 'todolist/reducer/ADD_TO_DO_LIST'\r\nexport const ADD_TASK = 'todolist/reducer/ADD_TASK'\r\nexport const CHANGE_TASK = \"todolist/reducer/CHANGE_TASK\"\r\nexport const DELETE_TODOLIST = \"todolist/reducer/DELETE_TODOLIST\"\r\nexport const DELETE_TASK = \"todolist/reducer/DELETE_TASK\"\r\nexport const SET_TO_DO_LIST = 'todolist/reducer/SET_TO_DO_LIST'\r\nexport const SET_TASKS = 'todolist/reducer/SET_TASKS'\r\nexport const CHANGE_LIST_TITLE = 'CHANGE_LIST_TITLE'\r\n\r\n\r\nexport type listTypes = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<taskType>\r\n}\r\n\r\nexport type taskType = {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: any\r\n    priority: string\r\n    startDate: any//(datetime)\r\n    deadline: any//required(datetime)\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: any  //required(datetime)\r\n}\r\n\r\n\r\ntype initialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    toDoLists: [] as Array<listTypes>\r\n}\r\n\r\nconst reducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case ADD_TO_DO_LIST:\r\n            return {\r\n                ...state,\r\n                toDoLists: [action.newList, ...state.toDoLists]\r\n            }\r\n        case SET_TO_DO_LIST:\r\n            return {\r\n                ...state,\r\n                toDoLists: action.toDoLists.map((tl: any) => ({...tl, tasks: []}))\r\n            }\r\n\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                toDoLists: state.toDoLists.map((todo: any) => {\r\n                    if (todo.id !== action.todolistId) {\r\n                        return todo\r\n                    } else {\r\n                        return {...todo, tasks: action.tasks}\r\n                    }\r\n                })\r\n            }\r\n        case ADD_TASK:\r\n            debugger\r\n            let newTasks = state.toDoLists.map((task: any) => {\r\n                if (task.id !== action.newTask.todoListId) {\r\n                    return task\r\n                } else if (!task.tasks) {\r\n                    debugger\r\n                    return {...task, tasks: [action.newTask]}\r\n                } else\r\n                    return {...task, tasks: [action.newTask, ...task.tasks]}\r\n            })\r\n            return {...state, toDoLists: newTasks}\r\n        case CHANGE_TASK:\r\n            return {\r\n                ...state, toDoLists: state.toDoLists.map((task: any) => {\r\n                        if (task.id !== action.toDoListId) {\r\n                            return task\r\n                        } else {\r\n                            return {\r\n                                ...task, tasks: [...task.tasks.map((t: any) => {\r\n                                    if (t.id !== action.taskId) {\r\n                                        return t\r\n                                    } else {\r\n                                        return {...t, ...action.obj}\r\n                                    }\r\n                                })]\r\n                            }\r\n                        }\r\n                    }\r\n                )\r\n            }\r\n        case CHANGE_LIST_TITLE:\r\n            return {\r\n                ...state, toDoLists: state.toDoLists.map((title: any) => {\r\n                        if (title.id !== action.toDoListId) {\r\n                            return title\r\n                        } else {\r\n                            return {...title, ...action.obj}\r\n                        }\r\n                    }\r\n                )\r\n            }\r\n        case DELETE_TODOLIST:\r\n            return {\r\n                ...state, toDoLists:\r\n                    state.toDoLists.filter((toDoList: any) => toDoList.id !== action.toDoListId)\r\n            }\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                toDoLists: state.toDoLists.map((todo: any) => {\r\n                    if (todo.id !== action.toDoListId) {\r\n                        return todo\r\n                    } else {\r\n                        return {\r\n                            ...todo, tasks: todo.tasks.filter((task: any) => task.id !== action.taskId)\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n    }\r\n    return state;\r\n}\r\nexport default reducer\r\n\r\n\r\n//_________________ thunk-creators____________________\r\n\r\ntype thunkType = baseThunkType<ActionsType>\r\n// type DispatchType = Dispatch<ActionsType>\r\n\r\nexport const getTasksThunkC = (toDoListId: string): thunkType => async (dispatch) => {\r\n    let result = await api.getTask(toDoListId)\r\n    if (!result.data.error) {\r\n        dispatch(actions.setTasks(result.data.items, toDoListId))\r\n    }\r\n}\r\n\r\nexport const addTaskThunkC = (title: string, toDoListId: string): thunkType => async (dispatch) => {\r\n    let result = await api.createTask(title, toDoListId)\r\n    if (result.data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(actions.addTaskAC(result.data.data.item))\r\n    }\r\n}\r\n\r\nexport const changeTaskThunkC = (toDoListId: string, taskId: string, task: taskType, title: string): thunkType => async (dispatch) => {\r\n    let result = await api.updateTask(toDoListId, taskId, task, {title: title})\r\n    if (result.data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(actions.changeTaskAC(toDoListId, taskId, {title: title}))\r\n    }\r\n}\r\n\r\nexport const changeListTitleThunkC = (toDoListId: string, title: string): thunkType => async (dispatch) => {\r\n    let result = await api.updateToDoList(toDoListId, {title: title})\r\n    if (result.data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(actions.changeListTitle(toDoListId, {title: title}))\r\n    }\r\n}\r\n\r\n\r\nexport const deleteTaskThunkC = (toDoListId: string, taskId: string): thunkType => async (dispatch) => {\r\n    let result = await api.deleteTask(toDoListId, taskId)\r\n    if (result.data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(actions.deleteTaskAC(toDoListId, taskId))\r\n    }\r\n}\r\n\r\nexport const deleteToDoListThunkC = (toDoListId: string): thunkType => async (dispatch) => {\r\n    let result = await api.deleteToDoList(toDoListId)\r\n    debugger\r\n    if (result.data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(actions.deleteToDoListAC(toDoListId))\r\n    }\r\n}\r\n\r\nexport const changeStatusThunkC = (toDoListId: string, taskId: string, task: taskType, status: boolean): thunkType => async (dispatch) => {\r\n    let result = await api.updateTask(toDoListId, taskId, task, {status: status})\r\n    if (result.data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(actions.changeTaskAC(toDoListId, taskId, {status: status}))\r\n    }\r\n}\r\n\r\nexport const changePriorityThunkC = (toDoListId: string, taskId: string, task: taskType, priority: string): thunkType => async (dispatch) => {\r\n    let result = await api.updateTask(toDoListId, taskId, task, {priority: priority})\r\n    if (result.data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(actions.changeTaskAC(toDoListId, taskId, {priority: priority}))\r\n    }\r\n}\r\n\r\nexport const addToDoListThunkC = (title: string): thunkType => async (dispatch) => {\r\n    let result = await api.createToDoList(title)\r\n    if (result.data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(actions.addTodolistAC(result.data.data.item))\r\n    }\r\n}\r\n\r\nexport const getToDoListThunkC = (): thunkType => async (dispatch) => {\r\n    let result = await api.getToDoList()\r\n    dispatch(actions.setToDoList(result.data))\r\n\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {connect} from \"react-redux\";\r\n\r\nimport TodoListTasks from \"./components/TodoListTasks\";\r\nimport TodoListFooter from \"./components/TodoListFooter\";\r\nimport TodoListTitle from \"./components/TodoListTitle\";\r\nimport AddNewItemForm from \"./components/AddNewItemForm\";\r\nimport {\r\n    addTaskThunkC,\r\n    changeListTitleThunkC, changePriorityThunkC, changeStatusThunkC, changeTaskThunkC,\r\n    deleteTaskThunkC,\r\n    deleteToDoListThunkC,\r\n    getTasksThunkC, taskType\r\n} from \"./store/reducer\";\r\nimport {AppStateType} from './store/store';\r\nimport {RouteComponentProps} from \"react-router\";\r\n\r\n\r\ntype mapStateToPropsType={\r\n    // tasks: Array<taskType>\r\n}\r\n\r\ntype mapDispatchToPropsType =\r\n    {\r\n    getTasksThunkC: (id: string) => void\r\n    addTaskThunkC: (title: string, idList: string) => void\r\n    changeStatusThunkC: (idList: string, taskId: string, task: taskType, status: any) => void\r\n    changeListTitleThunkC: (id: string, title: string) => void\r\n    deleteTaskThunkC: (id: string, taskId: string) => void\r\n    deleteToDoListThunkC: (toDoListId: string) => void\r\n    changePriorityThunkC: (id: string, idTask: string, task: taskType, priority: string) => void\r\n    changeTaskThunkC: (id: string, idTask: string, task: taskType, title: string) => void\r\n}\r\n\r\ntype OwnProps = {\r\n    id: string,\r\n    title: string,\r\n    tasks: Array<taskType> | []\r\n\r\n}\r\n\r\ntype PropsType = mapStateToPropsType & mapDispatchToPropsType & OwnProps & RouteComponentProps<{ id: string }>\r\n\r\n\r\nclass ToDoList extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        this.restoreState()\r\n    }\r\n\r\n\r\n    //____________________getting tasks of list from API_______________________\r\n\r\n    restoreState = () => {\r\n        this.props.getTasksThunkC(this.props.id)\r\n    }\r\n\r\n    state = {\r\n        tasks: [] as Array<taskType>,\r\n        filterValue: \"All\",\r\n    }\r\n\r\n    saveState = () => {\r\n        localStorage.setItem('our-state' + this.props.id, JSON.stringify(this.state))\r\n    }\r\n\r\n\r\n    //   __________________add task for list __________________\r\n\r\n    addItem = (title: string) => {\r\n        this.props.addTaskThunkC(title, this.props.id)\r\n    }\r\n\r\n    changeFilter = (newFilterValue: string) => {\r\n        this.setState({filterValue: newFilterValue}, () => {\r\n            this.saveState()\r\n        })\r\n    }\r\n\r\n\r\n    //___________ changing IS_DONE of task and modifying task________\r\n\r\n    changeStatus = (task: taskType, status: boolean) => {\r\n        this.props.changeStatusThunkC(this.props.id, task.id, task, status)\r\n    }\r\n\r\n\r\n    changeTitleOfList = (title: string) => {\r\n        this.props.changeListTitleThunkC(this.props.id, title)\r\n    }\r\n\r\n\r\n    changeTitle = (task: taskType, title: string) => {\r\n        this.props.changeTaskThunkC(this.props.id, task.id, task, title)\r\n    }\r\n\r\n\r\n    //________________change priority___________________________________\r\n\r\n    changePriority = (task: taskType, priority: string) => {\r\n        this.props.changePriorityThunkC(this.props.id, task.id, task, priority)\r\n    }\r\n\r\n\r\n    //___________Delete list of tasks_________\r\n\r\n    deleteToDoList = () => {\r\n        this.props.deleteToDoListThunkC(this.props.id)\r\n    };\r\n\r\n    //___________Delete task_________\r\n\r\n    deleteTask = (taskId: string) => {\r\n        this.props.deleteTaskThunkC(this.props.id, taskId)\r\n    };\r\n\r\n    render = () => {\r\n        let {tasks = []} = this.props;\r\n        return (\r\n            <div className=\"todoList\">\r\n                <TodoListTitle title={this.props.title} deleteToDoList={this.deleteToDoList}\r\n                               changeTitle={this.changeTitleOfList}/>\r\n                <AddNewItemForm addItem={this.addItem}/>\r\n                <TodoListTasks\r\n                    changeTitle={this.changeTitle}\r\n                    changeStatus={this.changeStatus}\r\n                    deleteTask={this.deleteTask}\r\n                    changePriority={this.changePriority}\r\n                    tasks={tasks.filter((t: any) => {\r\n                        if (this.state.filterValue === 'All') {\r\n                            return true\r\n                        }\r\n                        if (this.state.filterValue === 'Completed') {\r\n                            return t.status === 1\r\n                        }\r\n                        if (this.state.filterValue === 'Active') {\r\n                            return t.status === 0\r\n                        }\r\n                    })}/>\r\n                <TodoListFooter\r\n                    filterValue={this.state.filterValue}\r\n                    changeFilter={this.changeFilter}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default connect<null, mapDispatchToPropsType, OwnProps, AppStateType>(null,\r\n    {\r\n        deleteToDoListThunkC, deleteTaskThunkC,\r\n        getTasksThunkC, addTaskThunkC, changeTaskThunkC,\r\n        changeListTitleThunkC, changeStatusThunkC, changePriorityThunkC\r\n    })\r\n(ToDoList)\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {connect} from \"react-redux\";\r\nimport ToDoList from \"./ToDoList\";\r\nimport AddNewItemForm from \"./components/AddNewItemForm\";\r\nimport {addToDoListThunkC, getToDoListThunkC} from \"./store/reducer\";\r\nimport {AppStateType} from \"./store/store\";\r\n\r\ntype mapStateToPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype mapDispatchToPropsType = {\r\n    getToDoListThunkC: () => void\r\n    addToDoListThunkC: (title: string) => void\r\n}\r\n\r\n\r\ntype PropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\n\r\nclass App extends React.Component<PropsType> {\r\n    state = {\r\n        toDoLists: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.restoreState()\r\n    }\r\n\r\n    restoreState = () => {\r\n        this.props.getToDoListThunkC()\r\n    }\r\n\r\n    addToDoList = (title: string) => {\r\n        this.props.addToDoListThunkC(title)\r\n    }\r\n\r\n\r\n    render = () => {\r\n        // @ts-ignore\r\n        let toDoList = this.props.toDoLists.map(list => <ToDoList key={list.id} id={list.id} title={list.title} tasks={list.tasks}/>)\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"header\">\r\n                    <h3>Add new list of tasks</h3>\r\n                    <AddNewItemForm addItem={this.addToDoList}/>\r\n                </div>\r\n                <div className='toDo'>\r\n                    {toDoList}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        toDoLists: state.toDoListReducer.toDoLists\r\n    }\r\n}\r\n\r\n\r\nexport default connect<mapStateToPropsType, mapDispatchToPropsType, null, AppStateType>(mapStateToProps, {\r\n    addToDoListThunkC,\r\n    getToDoListThunkC\r\n})(App);\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore, Action, combineReducers, applyMiddleware} from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\n\r\n\r\nlet reducers = combineReducers({\r\n    toDoListReducer: reducer\r\n})\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\nexport default store;\r\n\r\n\r\n\r\n\r\n\r\n// ______type of state___________\r\n\r\ntype RootReducerType = typeof reducers\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n// ______type of actions___________\r\n\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsTypes<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesType<T>>\r\n\r\n\r\n// ______type of thunk-creator___________\r\n\r\nexport type baseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}