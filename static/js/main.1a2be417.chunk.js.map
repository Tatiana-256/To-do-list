{"version":3,"sources":["store/api.js","components/TodoListTask.jsx","components/TodoListTasks.jsx","components/TodoListFooter.jsx","components/TodoListTitle.jsx","components/AddNewItemForm.jsx","store/reducer.ts","store/actions.ts","ToDoList.jsx","App.js","serviceWorker.js","store/store.ts","index.js"],"names":["instance","axios","create","baseURL","withCredentials","headers","api","title","post","newTaskTitle","toDoListId","get","listId","taskId","task","obj","put","delete","TodoListTask","state","editMode","activateEditMode","setState","deActivateEditMode","e","props","changeTitle","currentTarget","value","onIsDoneChanges","changeStatus","checked","onChangePriority","changePriority","deleteTask","id","classSelect","priority","className","onChange","this","type","status","onBlur","autoFocus","defaultValue","onClick","addedDate","React","Component","TodoListTasks","taskElements","tasks","map","TodoListFooter","isHidden","hideShow","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTitle","onTitleChange","deleteToDoList","AddNewItemForm","error","itemName","onAddItemClick","newTask","addItem","onItemChange","event","onKeyPress","key","placeholder","ADD_TO_DO_LIST","ADD_TASK","CHANGE_TASK","DELETE_TODOLIST","DELETE_TASK","SET_TO_DO_LIST","SET_TASKS","initialState","toDoLists","reducer","action","newList","tl","todo","todolistId","newTasks","todoListId","t","filter","toDoList","actions","ToDoList","restoreState","then","response","data","setTasks","items","saveState","localStorage","setItem","JSON","stringify","result","resultCode","addTask","item","newFilterValue","сhangeTask","changeTitleOfList","сhangeListTitle","render","connect","dispatch","App","res","setToDoList","nextToDoListId","addToDoList","list","ConnectedApp","Boolean","window","location","hostname","match","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1a2be417.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/todo-lists',\r\n    withCredentials: true,\r\n    headers: {'API-KEY': '55ac5274-f21f-43a3-b42e-5cfba380d176'}\r\n})\r\n\r\nexport const api = {\r\n\r\n    createToDoList(title) {\r\n        return instance.post('', {title: title})\r\n    },\r\n    createTask(newTaskTitle, toDoListId) {\r\n        return instance.post(`/${toDoListId}/tasks`, {title: newTaskTitle})\r\n    },\r\n    getToDoList() {\r\n        return instance.get(\"/\")\r\n    },\r\n\r\n    updateTask(listId, taskId, task, obj) {\r\n        return instance.put(`/${listId}/tasks/${taskId}`, {...task, ...obj})\r\n    },\r\n    updateToDoList(listId, obj) {\r\n        return instance.put(`/${listId}`, {...obj})\r\n    },\r\n\r\n    deleteToDoList(listId) {\r\n        return instance.delete(`/${listId}`)\r\n\r\n    },\r\n    deleteTask(listId, taskId) {\r\n        return instance.delete(`/${listId}/tasks/${taskId}`)\r\n    },\r\n    getTask(toDoListId) {\r\n        return instance.get(`/${toDoListId}/tasks`)\r\n\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport './task.css'\r\n\r\nclass TodoListTask extends React.Component {\r\n\r\n    state = {\r\n        editMode: false,\r\n        title: ''\r\n    }\r\n\r\n\r\n    //_________________Add area for ability to change task\r\n\r\n    activateEditMode = () => {\r\n        this.setState({editMode: true})\r\n    }\r\n\r\n    deActivateEditMode = (e) => {\r\n        this.props.changeTitle(this.props.task, e.currentTarget.value)\r\n        this.setState({title: e.currentTarget.value, editMode: false})\r\n    }\r\n\r\n    //___________ changing IS_DONE of task and modifying task________\r\n\r\n    onIsDoneChanges = (e) => {\r\n\r\n        this.props.changeStatus(this.props.task, e.currentTarget.checked)\r\n    }\r\n\r\n\r\n    //_____________change priority_____________\r\n\r\n    onChangePriority = (e) => {\r\n        this.props.changePriority(this.props.task, e.currentTarget.value)\r\n    }\r\n\r\n\r\n    //___________Delete task_________\r\n\r\n    deleteTask = () => {\r\n        this.props.deleteTask(this.props.task.id)\r\n    }\r\n\r\n\r\n    //___________________\r\n\r\n\r\n    classSelect = () => {\r\n        if (this.props.task.priority === \"1\") {\r\n            return 'low'\r\n        } else if (this.props.task.priority === \"2\") {\r\n            return 'average'\r\n        } else if (this.props.task.priority === \"3\") {\r\n            return 'high'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"\">\r\n            <div className=\"todoList-tasks\">\r\n                <div className=\"todoList-task\">\r\n                    <div className='hov'>\r\n                        <input\r\n                            onChange={this.onIsDoneChanges}\r\n                            type=\"checkbox\" checked={this.props.task.status}/>\r\n\r\n                        {this.state.editMode ?\r\n                            <input onBlur={this.deActivateEditMode}\r\n                                   autoFocus={true}\r\n                                   defaultValue={this.props.task.title}/> :\r\n                            <span onClick={this.activateEditMode}>\r\n                            {this.props.task.title}\r\n                        </span>}\r\n                        <div className=\"inner\">\r\n                            <div>Created: {this.props.task.addedDate}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='prior'>\r\n                        <select\r\n                            className={this.classSelect}\r\n                            value={this.props.task.priority}\r\n                            onChange={this.onChangePriority}\r\n                        >\r\n                            <option>Select priority:</option>\r\n                            <option value='1' className='low'>low</option>\r\n                            <option value=\"2\" className='average'>average</option>\r\n                            <option value=\"3\" className='high'>high\r\n                            </option>\r\n                        </select>\r\n                        <button className='delete' onClick={this.deleteTask}>x</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default TodoListTask","import React from 'react';\r\nimport TodoListTask from \"./TodoListTask\";\r\n\r\nclass TodoListTasks extends React.Component {\r\n    render() {\r\n        let taskElements = this.props.tasks.map(task => {\r\n            return <TodoListTask\r\n                changeTitle ={this.props.changeTitle}\r\n                changeStatus={this.props.changeStatus}\r\n                deleteTask={this.props.deleteTask}\r\n                changePriority={this.props.changePriority}\r\n                task={task}\r\n            />\r\n        })\r\n        return (\r\n            <div className=\"todoList-task\">\r\n                {taskElements}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTasks","import React from 'react';\r\n\r\nclass TodoListFooter extends React.Component {\r\n    state = {isHidden: true}\r\n\r\n    hideShow = () => {\r\n        this.setState({isHidden: !this.state.isHidden})\r\n    }\r\n\r\n    onAllFilterClick = () => {\r\n        this.props.changeFilter('All')\r\n    }\r\n    onCompletedFilterClick = () => {\r\n        this.props.changeFilter('Completed')\r\n    }\r\n    onActiveFilterClick = () => {\r\n        this.props.changeFilter('Active')\r\n    }\r\n\r\n\r\n    render() {\r\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"normal\";\r\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"normal\";\r\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"normal\";\r\n\r\n        return (\r\n            <div className=\"todoList-footer\">\r\n                {this.state.isHidden && <div>\r\n                    <button className={classForAll} onClick={this.onAllFilterClick}>All\r\n                    </button>\r\n                    <button className={classForCompleted} onClick={this.onCompletedFilterClick}>Completed\r\n                    </button>\r\n                    <button className={classForActive} onClick={this.onActiveFilterClick}>Active\r\n                    </button>\r\n                </div>}\r\n                {this.state.isHidden ? <div>\r\n                        <button onClick={this.hideShow} className='btn'>Hide</button>\r\n                    </div> :\r\n                    <div>\r\n                        <button onClick={this.hideShow} className='btn'>Show</button>\r\n                    </div>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListFooter","import React from \"react\";\r\n\r\n\r\nclass TodoListTitle extends React.Component {\r\n    state = {\r\n        editMode: false,\r\n        title: this.props.title\r\n    }\r\n\r\n\r\n    //_________________Add area for ability to change task\r\n\r\n    activateEditMode = () => {\r\n        this.setState({editMode: true})\r\n    }\r\n\r\n    deActivateEditMode = (e) => {\r\n\r\n        this.props.changeTitle(e.currentTarget.value)\r\n        this.setState({editMode: false})\r\n    }\r\n\r\n    onTitleChange(e) {\r\n        this.setState({title: e.currentTarget.value})\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        debugger\r\n        return <div className='inpt'>\r\n\r\n            {this.state.editMode ?\r\n                <input onBlur={this.deActivateEditMode}\r\n                       autoFocus={true}\r\n                       value={this.state.title}\r\n                       onChange={this.onTitleChange}\r\n                /> :\r\n                <span onClick={this.activateEditMode}>\r\n                            {this.props.title}\r\n                        </span>}\r\n            <div>\r\n                <button className='delete' onClick={this.props.deleteToDoList}>x</button>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default TodoListTitle","import React from 'react';\r\n\r\nclass AddNewItemForm extends React.Component {\r\n    state = {\r\n        error: true,\r\n        itemName: ''\r\n    }\r\n\r\n\r\n    onAddItemClick = () => {\r\n        let newTask = this.state.itemName\r\n        this.setState({itemName: ''})\r\n        if (newTask === '') {\r\n            this.setState({error: true})\r\n        } else {\r\n            this.setState({error: false})\r\n            this.props.addItem(newTask)\r\n        }\r\n\r\n    }\r\n\r\n    onItemChange = (event) => {\r\n        this.setState({\r\n            error: false,\r\n            itemName: event.currentTarget.value\r\n        })\r\n    }\r\n\r\n    onKeyPress = (e) => {\r\n        if (e.key === \"Enter\") {\r\n            this.onAddItemClick()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <div className=\"todoList-newTaskForm\">\r\n                <input value={this.state.itemName} onChange={this.onItemChange}\r\n                       type=\"text\"\r\n                       onKeyPress={this.onKeyPress}\r\n                       placeholder=\"New task name\"\r\n                       className={this.state.error ? 'error' : ''}\r\n                />\r\n                <button onClick={this.onAddItemClick} className='btn'>Add</button>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default AddNewItemForm","import {ActionsType} from \"./actions\";\r\n\r\nexport const ADD_TO_DO_LIST = 'todolist/reducer/ADD_TO_DO_LIST'\r\nexport const ADD_TASK = 'todolist/reducer/ADD_TASK'\r\nexport const CHANGE_TASK = \"todolist/reducer/CHANGE_TASK\"\r\nexport const DELETE_TODOLIST = \"todolist/reducer/DELETE_TODOLIST\"\r\nexport const DELETE_TASK = \"todolist/reducer/DELETE_TASK\"\r\nexport const SET_TO_DO_LIST = 'todolist/reducer/SET_TO_DO_LIST'\r\nexport const SET_TASKS = 'todolist/reducer/SET_TASKS'\r\nexport const CHANGE_LIST_TITLE = 'CHANGE_LIST_TITLE'\r\n\r\n\r\nexport type listTypes = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<taskType>\r\n}\r\n\r\nexport type taskType = {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: number\r\n    priority: number\r\n    startDate: any//(datetime)\r\n    deadline: any//required(datetime)\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: any  //required(datetime)\r\n}\r\n\r\n\r\ntype initialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    toDoLists: [] as Array<listTypes>\r\n}\r\n\r\nconst reducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case ADD_TO_DO_LIST:\r\n            return {\r\n                ...state,\r\n                toDoLists: [action.newList, ...state.toDoLists]\r\n            }\r\n        case SET_TO_DO_LIST:\r\n            return {\r\n                ...state,\r\n                toDoLists: action.toDoLists.map(tl => ({...tl, tasks: []}))\r\n            }\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                toDoLists: state.toDoLists.map(todo => {\r\n                    if (todo.id !== action.todolistId) {\r\n                        return todo\r\n                    } else {\r\n                        return {...todo, tasks: action.tasks}\r\n                    }\r\n                })\r\n            }\r\n        case ADD_TASK:\r\n            let newTasks = state.toDoLists.map((task: any) => {\r\n                if (task.id !== action.newTask.todoListId) {\r\n                    return task\r\n                } else {\r\n                    return {...task, tasks: [...task.tasks, action.newTask]}\r\n                }\r\n            })\r\n            return {...state, toDoLists: newTasks}\r\n        case CHANGE_TASK:\r\n            return {\r\n                ...state, toDoLists: state.toDoLists.map((task: any) => {\r\n                        if (task.id !== action.toDoListId) {\r\n                            return task\r\n                        } else {\r\n                            return {\r\n                                ...task, tasks: [...task.tasks.map((t: any) => {\r\n                                    if (t.id !== action.taskId) {\r\n                                        return t\r\n                                    } else {\r\n                                        return {...t, ...action.obj}\r\n                                    }\r\n                                })]\r\n                            }\r\n                        }\r\n                    }\r\n                )\r\n            }\r\n        case CHANGE_LIST_TITLE:\r\n            return {\r\n                ...state, toDoLists: state.toDoLists.map((title: any) => {\r\n                        if (title.id !== action.toDoListId) {\r\n                            return title\r\n                        } else {\r\n                            return {...title, ...action.obj}\r\n                        }\r\n                    }\r\n                )\r\n            }\r\n        case DELETE_TODOLIST:\r\n            return {\r\n                ...state, toDoLists:\r\n                    state.toDoLists.filter((toDoList: any) => toDoList.id !== action.toDoListId)\r\n            }\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                toDoLists: state.toDoLists.map((todo: any) => {\r\n                    if (todo.id !== action.toDoListId) {\r\n                        return todo\r\n                    } else {\r\n                        return {\r\n                            ...todo, tasks: todo.tasks.filter((task: any) => task.id !== action.taskId)\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n    }\r\n    return state;\r\n}\r\nexport default reducer","import {\r\n    ADD_TASK,\r\n    ADD_TO_DO_LIST, CHANGE_LIST_TITLE,\r\n    CHANGE_TASK,\r\n    DELETE_TASK,\r\n    DELETE_TODOLIST, listTypes,\r\n    SET_TASKS,\r\n    SET_TO_DO_LIST, taskType\r\n} from \"./reducer\";\r\nimport {InferActionsTypes} from \"./store\";\r\n\r\nexport type ActionsType = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    addTaskAC: (newTask: taskType) => ({type: ADD_TASK, newTask: newTask} as const),\r\n    addTodolistAC: (newList: listTypes) => ({type: ADD_TO_DO_LIST, newList: newList} as const),\r\n    сhangeTaskAC: (toDoListId: string, taskId: string, obj: any) => ({\r\n        type: CHANGE_TASK,\r\n        obj: obj,\r\n        taskId: taskId,\r\n        toDoListId: toDoListId\r\n    } as const),\r\n    сhangeListTitle: (toDoListId: string, obj: any) => ({\r\n        type: CHANGE_LIST_TITLE, obj: obj, toDoListId: toDoListId\r\n    } as const),\r\n    deleteToDoListAC: (toDoListId: string) => ({type: DELETE_TODOLIST, toDoListId} as const),\r\n    deleteTaskAC: (toDoListId: string, taskId: string) => ({\r\n        type: DELETE_TASK,\r\n        toDoListId,\r\n        taskId,\r\n    } as const),\r\n    setToDoList: (toDoLists: Array<listTypes>) => ({type: SET_TO_DO_LIST, toDoLists} as const),\r\n    setTasks: (tasks: Array<taskType>, todolistId: string) => ({type: SET_TASKS, tasks, todolistId} as const)\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {connect} from \"react-redux\";\r\nimport {api} from \"./store/api\";\r\n\r\n\r\nimport TodoListTasks from \"./components/TodoListTasks\";\r\nimport TodoListFooter from \"./components/TodoListFooter\";\r\nimport TodoListTitle from \"./components/TodoListTitle\";\r\nimport AddNewItemForm from \"./components/AddNewItemForm\";\r\nimport {actions} from \"./store/actions\";\r\n\r\nclass ToDoList extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.restoreState()\r\n    }\r\n\r\n\r\n    //____________________getting tasks of list from API_______________________\r\n\r\n    restoreState = () => {\r\n        api.getTask(this.props.id)\r\n            .then(response => {\r\n                if (!response.data.error) {\r\n                    this.props.setTasks(response.data.items, this.props.id)\r\n                }\r\n            })\r\n    }\r\n\r\n    state = {\r\n        tasks: [],\r\n        filterValue: \"All\",\r\n    }\r\n\r\n    saveState = () => {\r\n        localStorage.setItem('our-state' + this.props.id, JSON.stringify(this.state))\r\n    }\r\n\r\n\r\n    //   __________________add task for list __________________\r\n\r\n    addItem = (title) => {\r\n        api.createTask(title, this.props.id)\r\n            .then(result => {\r\n                if (result.data.resultCode === 0) {\r\n                    this.props.addTask(result.data.data.item)\r\n                }\r\n            })\r\n    }\r\n\r\n    changeFilter = (newFilterValue) => {\r\n        this.setState({filterValue: newFilterValue}, () => {\r\n            this.saveState()\r\n        })\r\n    }\r\n\r\n\r\n    //___________ changing IS_DONE of task and modifying task________\r\n\r\n    changeStatus = (task, status) => {\r\n\r\n\r\n        api.updateTask(this.props.id, task.id, task, {status: status})\r\n            .then(result => {\r\n                if (result.data.resultCode === 0) {\r\n                    this.props.сhangeTask(this.props.id, task.id, {status: status})\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n    changeTitleOfList = (title) => {\r\n        api.updateToDoList(this.props.id, {title: title})\r\n            .then(result => {\r\n                if (result.data.resultCode === 0) {\r\n                    this.props.сhangeListTitle(this.props.id, {title: title})\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n\r\n    changeTitle = (task, title) => {\r\n        api.updateTask(this.props.id, task.id, task, {title: title})\r\n            .then(result => {\r\n                if (result.data.resultCode === 0) {\r\n                    this.props.сhangeTask(this.props.id, task.id, {title: title})\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n    //________________change priority___________________________________\r\n\r\n    changePriority = (task, priority) => {\r\n\r\n        api.updateTask(this.props.id, task.id, task, {priority: priority})\r\n            .then(result => {\r\n                if (result.data.resultCode === 0) {\r\n                    this.props.сhangeTask(this.props.id, task.id, {priority: priority})\r\n                }\r\n            })\r\n\r\n\r\n    }\r\n\r\n\r\n    //___________Delete list of tasks_________\r\n\r\n    deleteToDoList = () => {\r\n        api.deleteToDoList(this.props.id)\r\n            .then(result => {\r\n                debugger\r\n                if (result.data.resultCode === 0) {\r\n                    this.props.deleteToDoList(this.props.id)\r\n                }\r\n            })\r\n    };\r\n\r\n    //___________Delete task_________\r\n\r\n    deleteTask = (taskId) => {\r\n        api.deleteTask(this.props.id, taskId)\r\n            .then(result => {\r\n                if (result.data.resultCode === 0) {\r\n                    this.props.deleteTask(this.props.id, taskId)\r\n                }\r\n            })\r\n    };\r\n\r\n    render = () => {\r\n        let {tasks = []} = this.props;\r\n        return (\r\n            <div className=\"todoList\">\r\n                <TodoListTitle title={this.props.title} deleteToDoList={this.deleteToDoList}\r\n                               changeTitle={this.changeTitleOfList}/>\r\n                <AddNewItemForm addItem={this.addItem}/>\r\n                <TodoListTasks\r\n                    changeTitle={this.changeTitle}\r\n                    changeStatus={this.changeStatus}\r\n                    deleteTask={this.deleteTask}\r\n                    changePriority={this.changePriority}\r\n                    tasks={tasks.filter(t => {\r\n                        if (this.state.filterValue === 'All') {\r\n                            return true\r\n                        }\r\n                        if (this.state.filterValue === 'Completed') {\r\n                            return t.status === 1\r\n                        }\r\n                        if (this.state.filterValue === 'Active') {\r\n                            return t.status === 0\r\n                        }\r\n                    })}/>\r\n                <TodoListFooter isHidden={this.state.isHidden} filterValue={this.state.filterValue}\r\n                                changeFilter={this.changeFilter}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addTask: (newTask) => {\r\n            dispatch(actions.addTaskAC(newTask))\r\n        },\r\n        сhangeTask: (toDoListId, taskId, obj) => {\r\n            dispatch(actions.сhangeTaskAC(toDoListId, taskId, obj))\r\n        },\r\n        сhangeListTitle: (toDoListId, obj) => {\r\n            dispatch(actions.сhangeListTitle(toDoListId, obj))\r\n        },\r\n        deleteToDoList: (toDoListId) => {\r\n            dispatch(actions.deleteToDoListAC(toDoListId))\r\n        },\r\n        deleteTask: (toDoListId, taskId) => {\r\n            dispatch(actions.deleteTaskAC(toDoListId, taskId))\r\n        },\r\n        setTasks: (tasks, todolistId) => {\r\n            dispatch(actions.setTasks(tasks, todolistId))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(ToDoList)\r\n\r\n","import React from 'react';\nimport './App.css';\nimport {connect} from \"react-redux\";\nimport ToDoList from \"./ToDoList\";\nimport AddNewItemForm from \"./components/AddNewItemForm\";\nimport {actions} from \"./store/actions\";\nimport {api} from \"./store/api\";\n\nclass App extends React.Component {\n    state = {\n        toDoLists: []\n    }\n\n    componentDidMount() {\n        this.restoreState()\n    }\n\n    restoreState = () => {\n        api.getToDoList()\n            .then(res => {\n                this.props.setToDoList(res.data);\n            });\n    }\n\n    nextToDoListId = 0\n\n\n    addToDoList = (title) => {\n        api.createToDoList(title)\n            .then(result => {\n                if (result.data.resultCode === 0) {\n                    this.props.addToDoList(result.data.data.item)\n                }\n            })\n    }\n\n\n    render = () => {\n        let toDoList = this.props.toDoLists.map(list => <ToDoList id={list.id} title={list.title} tasks={list.tasks}/>)\n        return (\n            <div className=\"App\">\n                <div className=\"header\">\n                    <h3>Add new list</h3>\n                    <AddNewItemForm addItem={this.addToDoList}/>\n                </div>\n                <div className='toDo'>\n                    {toDoList}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        toDoLists: state.toDoLists\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addToDoList: (newList) => {\n            dispatch(actions.addTodolistAC(newList))\n        },\n        setToDoList: (toDoLists) => {\n            dispatch(actions.setToDoList(toDoLists))\n        }\n    }\n}\n\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\nexport default ConnectedApp\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst store = createStore(reducer);\r\n\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsTypes<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesType<T>>\r\n\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}